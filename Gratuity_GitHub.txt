import pandas as pd
desired_width = 300
pd.set_option('display.width', desired_width)
pd.set_option('display.max_columns', 50)
import numpy as np
import xlrd
import xlsxwriter
import time
from datetime import datetime
start_time = time.time()
from fpdf import FPDF
from tkinter import *
import tkinter
import tkinter.messagebox
from tkinter import ttk


#Graphical user interface with user input
class GRATUITY:
    def __init__(self):
        self.main_window = tkinter.Tk()

        self.frame1 = tkinter.Frame(self.main_window)
        self.frame2 = tkinter.Frame(self.main_window)
        self.frame3 = tkinter.Frame(self.main_window)
        self.frame4 = tkinter.Frame(self.main_window)
        self.frame5 = tkinter.Frame(self.main_window)
        # self.mid_frame = tkinter.Frame(self.main_window, width=100, height=100)
        self.bottom_frame = tkinter.Frame(self.main_window)

        #Top Frames
        self.label1 = tkinter.Label(self.frame1, text='DISCOUNT RATE :')
        self.entry1 = tkinter.Entry(self.frame1, width=10)
        self.label2 = tkinter.Label(self.frame2, text='SALARY RATE :')
        self.entry2 = tkinter.Entry(self.frame2, width=10)
        self.label3 = tkinter.Label(self.frame3, text='RETIREMENT AGE :')
        self.entry3 = tkinter.Entry(self.frame3, width=10)
        self.label4 = tkinter.Label(self.frame4, text='MAX YEAR OF SERVICE :')
        self.entry4 = tkinter.Entry(self.frame4, width=10)
        self.label5 = tkinter.Label(self.frame5, text='WITHDRAWAL FACTOR MULTIPLE :')
        self.entry5 = tkinter.Entry(self.frame5, width=10)

        self.label1.pack(side='left')
        self.entry1.pack(side='left')
        self.label2.pack(side='left')
        self.entry2.pack(side='left')
        self.label3.pack(side='left')
        self.entry3.pack(side='left')
        self.label4.pack(side='left')
        self.entry4.pack(side='left')
        self.label5.pack(side='left')
        self.entry5.pack(side='left')

        #Mid Frame
        # self.cash_value = tkinter.Label(self.mid_frame, text='Cash Values')
        # self.value = tkinter.StringVar()
        # self.answer_label = tkinter.Label(self.mid_frame, textvariable=self.value)
        #
        # self.cash_value.pack(side='left')
        # self.answer_label.pack(side='left')

        # bottom frame
        self.calc_button = tkinter.Button(self.bottom_frame, text='START VALUATION', command=self.main)
        self.quit_button = tkinter.Button(self.bottom_frame, text='Quit', command=self.main_window.destroy)

        self.calc_button.pack(side='left')
        self.quit_button.pack(side='left')

        #Pack All Frames
        self.frame1.pack()
        self.frame2.pack()
        self.frame3.pack()
        self.frame4.pack()
        self.frame5.pack()
        # self.mid_frame.pack()
        self.bottom_frame.pack()

        #Enter into Tkinter Loop
        tkinter.mainloop()

    #Salary Increase Period
    salary_increase_non = pd.to_datetime('01-01-2019')
    salary_increase_top = pd.to_datetime('31-12-2019')

    def main(self):

        discount_rate = float(self.entry1.get())
        salary_rate = float(self.entry2.get())
        retirement_age = int(self.entry3.get())
        maximum_yos = int(self.entry4.get())
        w_factor_multiple = int(self.entry5.get())

        #Read Data from Database
        main_data = pd.read_csv("main_data2.csv")
        m_table = pd.read_csv("mortality.csv")


        print("Data Fetched")
        print(" ")

        'Factors'
        start_time = time.time()
        YEARS = [0, 2, 7, 10]
        RATE = [0.0, (12/30), (20/30), 1]
        fact_table = {'Year': YEARS, 'Year_Value': RATE}
        fact_df = pd.DataFrame(fact_table, index=list(YEARS))
        print(fact_df)


        M_AGE = []
        M_QX = []
        FACT = []
        W = []
        DX = []
        WX = []
        LX = []
        DX_WX = []

        "Mortality Table"
        lx = 0
        dx_wx = 0
        for index, row in  m_table.iterrows():

            age = row['Age']
            q_x = row['qx']
            fac = row['factor']
            w = np.where(age == 60, 1000,fac * w_factor_multiple)
            lx = (np.where(age <= 20, 100000, lx - (dx_wx)))
            dx = round(q_x/1000*(1-w/1000)*np.where(age<=20,100000, lx))
            wx = round((lx-dx)*w/1000)
            dx_wx = (dx + wx)

            M_AGE.append(age)
            M_QX.append(q_x)
            FACT.append(fac)
            W.append(w)
            DX.append(dx)
            WX.append(wx)
            LX.append(lx)
            DX_WX.append(dx_wx)

        path = "mortality_working.xlsx"
        writer = pd.ExcelWriter(path, engine='xlsxwriter')
        sheet_1 = pd.read_excel(path, sheet_name=0)

        sheet_1['NULL'] = int(0)
        sheet_1.drop(sheet_1.columns[[0]], axis=1, inplace=True)
        sheet_1['AGE'] = M_AGE
        sheet_1['QX'] = M_QX
        sheet_1['FACTOR'] = FACT
        sheet_1['W'] = W
        sheet_1['DX'] = DX
        sheet_1['WX'] = WX
        sheet_1['LX'] = LX
        sheet_1['DX_WX'] = DX_WX

        print(' ')
        sheet_1.to_excel(writer, sheet_name='mortality')
        writer.save()
        # writer.close()
        print("Mortality Table Updated")
        print("  ")

        "Gratuity Data"
        valuation_date = pd.to_datetime('31-12-2018')
       
        print("Gratuity Calculation Just Started")
        for index_d, row_d in main_data.iterrows():
            # print(index_d,row_d)
            e_no = row_d['E_No']
            name = row_d['Name']
            dob = pd.to_datetime(row_d['DOB'])
            # print("DOB is :",dob )
            doj = pd.to_datetime(row_d['DOJ'])
            salary = row_d['Salary']
            type = row_d['Type']
            age_g = np.where(round((valuation_date-dob).days/365.25)>60,60,round((valuation_date-dob).days/365.25))
            age_aaa = round((valuation_date-dob).days/365.25)
            max_yos = round((((valuation_date-doj).days/365.25)-(int((valuation_date-doj).days)/365.25))*12)
            # print("maximum year of service is: ",max_yos)
            yos_g = round((valuation_date-doj).days/365.25)+(max_yos/12)
            # print("Year of service is",yos_g)


            # 'GENERAL'
            m_yos = yos_g
            age_e = int(age_g)
            salary_e = salary
            g_year = 0
            sum_r_cashflow = 0
            sum_d_cashflow = 0
            sum_total = 0
            sum_service_cost = 0
            year_inter_cost = 0
            year_disc_liab = 0
            sum_exp_cashflow = 0
            for gen_series in range(age_e-1,retirement_age):
                mort_cond_var = sheet_1[(sheet_1.AGE == age_e)]
                mort_cond_fix = sheet_1[(sheet_1.AGE == age_g)]

                g_salary = (salary_e) * (1 + salary_rate) ** (g_year)

                # Here we will calculate Probability
                px = (mort_cond_var.iloc[0,6])/(mort_cond_fix.iloc[0,6])
                qx = (mort_cond_var.iloc[0,4])/(mort_cond_var.iloc[0,6])
                wx = (mort_cond_var.iloc[0,5])/(mort_cond_var.iloc[0,6])

                # Here we will calculate Death
                fact_cond = (fact_df[(fact_df.Year<=m_yos)])
                fact_cond = fact_df.loc[fact_cond.Year_Value.idxmax()]
                factor = fact_cond.Year_Value

               # Dont use this one >>> cashflow = g_salary * px * qx*((np.where(m_yos<5,factor*m_yos,(5*0.5)+((m_yos-5)*factor))))
                cashflow_d = g_salary * px * qx * m_yos * factor
                discount_d = cashflow_d/(1+discount_rate)**(g_year)
                c_cashflow_d = (discount_d*yos_g)/m_yos
                sum_d_cashflow += c_cashflow_d

                #Here we will work for retirement
                cashflow_r = px * wx * g_salary * m_yos * factor
                discount_r = cashflow_r/(1+discount_rate)**(g_year)
                c_cashflow_r = ((discount_r*yos_g)/m_yos)
                sum_r_cashflow += c_cashflow_r
                # Working for Total
                cash_total = c_cashflow_d + c_cashflow_r
                sum_total += cash_total

                # Working for Service Cost
                service_cost = ((discount_r+discount_d)/m_yos)
                sum_service_cost += service_cost



                # Working for Expected Cashflow
                exp_cashflow = ((cashflow_r+cashflow_d)/(1+salary_rate)**(g_year))
                sum_exp_cashflow += exp_cashflow
                print(cash_total,service_cost,exp_cashflow)
                AGE.append(age_g)
                YOS.append(m_yos)
                SALARY.append(salary_e)

                age_e += 1
                m_yos += 1
                g_year += 1


            # Interest Cost Calculation
            fact_cond_i = (fact_df[(fact_df.Year <= yos_g)])
            fact_cond_i = fact_df.loc[fact_cond_i.Year_Value.idxmax()]
            factor_i = fact_cond_i.Year_Value

            int_cond_death = sheet_1[(sheet_1.AGE == age_g)]
            int_cond_retirement = sheet_1[(sheet_1.AGE == age_g)]
            death_minus = factor_i * yos_g * salary * (int_cond_death.iloc[0,4])/(int_cond_death.iloc[0,6])
            # print(death_minus)
            retire_minus = factor_i * yos_g * salary * (int_cond_retirement.iloc[0,5])/(int_cond_retirement.iloc[0,6])
            # print(retire_minus)
            interest_cost = (sum_total*discount_rate)+(sum_service_cost - death_minus - retire_minus)*discount_rate
            year_inter_cost += interest_cost


            #Discounting Liability Calcultion
            discounting_liability = np.where(age_g<=retirement_age, salary*min(yos_g,maximum_yos)*factor_i,0)
            year_disc_liab += discounting_liability

            S_No.append(e_no)
            NAME.append(name)
            DOB.append(dob)
            DOJ.append(doj)
            SALARY.append(salary)
            TYPE.append(type)
            AGE.append(age_g)
            YOS.append(yos_g)
            RETIREMENT.append(sum_r_cashflow)
            DEATH.append(sum_d_cashflow)
            TOTAL.append(sum_total)
            SERVICE_COST.append(sum_service_cost)
            INTEREST_COST.append(year_inter_cost)
            DISC_LIABILITY.append(year_disc_liab)
            EXPECTED_CASHFLOW.append(sum_exp_cashflow)

        print("Gratuity Valuation Completed..")
        # print(*RETIREMENT,sep="\n")
        result_path = "Final_Results.xlsx"
        writer = pd.ExcelWriter(result_path, engine='xlsxwriter')
        sheet_1 = pd.read_excel(result_path, sheet_name='results')

        sheet_1['NULL'] = int(0)
        sheet_1.drop(sheet_1.columns[[0]], axis=1, inplace=True)
        sheet_1['S_No'] = S_No
        sheet_1['NAME'] = NAME
        sheet_1['DOB'] = DOB  # * len(evdata)
        sheet_1['DOJ'] = DOJ  # * len(evdata)
        sheet_1['SALARY'] = SALARY  # * len(evdata)
        sheet_1['TYPE'] = TYPE  # * len(evdata)
        sheet_1['AGE'] = AGE  # * len(evdata)
        sheet_1['YOS'] = YOS
        sheet_1['DEATH'] = DEATH  # * len(evdata)
        sheet_1['RETIREMENT'] = RETIREMENT  # * len(evdata)
        sheet_1['TOTAL'] = TOTAL  # * len(evdata)
        sheet_1['SERVICE_COST'] = SERVICE_COST  # * len(evdata)
        sheet_1['INTEREST_COST'] = INTEREST_COST  # * len(evdata)
        sheet_1['DISC_LIABILITY'] = DISC_LIABILITY  # * len(evdata)
        sheet_1['EXPECTED_CASHFLOW'] = EXPECTED_CASHFLOW  # * len(evdata)
        sheet_1.drop(sheet_1.columns[[0]], axis=1, inplace=True)
        print(' ')
        print('Results being published in Excel...')
        print(' ')
        sheet_1.to_excel(writer, sheet_name='results')
        writer.save()
        writer.close()

        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=14)
        pdf.cell(200, 10, txt="GRATUITY VALUATION AS OF DECEMBER 31st, 2019" , ln=1, align="C")
        pdf.cell(200, 10, txt="TOTAL DEATH:  " + format(sheet_1["DEATH"].sum(), ',.0f'), ln=3)
        pdf.cell(200, 10, txt="TOTAL RETIREMENT:  " + format(sheet_1["RETIREMENT"].sum(), ',.0f'), ln=4)
        pdf.cell(200, 10, txt="TOTAL DEATH & RETIREMENT:  " + format(sheet_1["TOTAL"].sum(), ',.0f'), ln=5)
        pdf.cell(200, 10, txt="TOTAL SERVICE COST:  " + format(sheet_1["SERVICE_COST"].sum(), ',.0f'), ln=6)
        pdf.cell(200, 10, txt="TOTAL INTEREST COST:  " + format(sheet_1["INTEREST_COST"].sum(), ',.0f'), ln=7)
        pdf.cell(200, 10, txt="TOTAL DISCOUNTING LIABILITY:  " + format(sheet_1["DISC_LIABILITY"].sum(), ',.0f'), ln=8)
        pdf.cell(200, 10, txt="TOTAL EXPECTED CASHFLOW:  " + format(sheet_1["EXPECTED_CASHFLOW"].sum(), ',.0f'), ln=9)

        pdf.output("Gratuity_Results.pdf")


        print("All Done...")
        print("--- Gratuity Valuation Completed in %s seconds ---" % (time.time() - start_time))
grat_result = GRATUITY()